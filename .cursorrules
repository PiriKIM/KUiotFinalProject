# 자세요정 프로젝트 커서 룰

## 프로젝트 개요
이 프로젝트는 AI 기반 체형 분석 및 자세 교정 웹 애플리케이션입니다. Python FastAPI 백엔드와 React 프론트엔드로 구성됩니다.

## 기술 스택
- **백엔드**: Python 3.9+, FastAPI, OpenCV, MediaPipe, SQLite/PostgreSQL
- **프론트엔드**: React.js, HTML5, CSS3, JavaScript
- **AI/ML**: OpenCV, MediaPipe, NumPy
- **데이터베이스**: SQLite (개발), PostgreSQL (운영)
- **인증**: JWT
- **TTS**: pyttsx3 또는 gTTS

## 코딩 규칙

### 1. 파일 구조
```
FinalProject/
├── backend/
│   ├── app/
│   │   ├── __init__.py
│   │   ├── main.py
│   │   ├── models/
│   │   ├── routers/
│   │   ├── services/
│   │   ├── utils/
│   │   └── database/
│   ├── requirements.txt
│   └── alembic/
├── frontend/
│   ├── public/
│   ├── src/
│   │   ├── components/
│   │   ├── pages/
│   │   ├── services/
│   │   └── utils/
│   ├── package.json
│   └── README.md
├── docs/
├── tests/
├── PRD.md
└── README.md
```

### 2. Python 코딩 규칙
- **PEP 8** 스타일 가이드 준수
- **타입 힌트** 필수 사용
- **docstring** 작성 필수
- **async/await** 패턴 사용 (FastAPI)
- **예외 처리** 적절히 구현

### 3. FastAPI 규칙
- **Pydantic 모델** 사용하여 데이터 검증
- **의존성 주입** 활용
- **OpenAPI 문서** 자동 생성
- **WebSocket** 실시간 통신 구현

### 4. 프론트엔드 규칙
- **함수형 컴포넌트** 사용
- **React Hooks** 활용
- **TypeScript** 사용 권장
- **반응형 디자인** 구현

### 5. 데이터베이스 규칙
- **SQLAlchemy ORM** 사용
- **마이그레이션** 관리 (Alembic)
- **인덱스** 최적화
- **트랜잭션** 관리

## AI/Computer Vision 규칙

### 1. MediaPipe 사용
- **Pose Detection** 모델 활용
- **Landmark 좌표** 정확도 검증
- **실시간 처리** 최적화
- **에러 핸들링** 구현

### 2. OpenCV 사용
- **이미지 전처리** 구현
- **프레임 처리** 최적화
- **메모리 관리** 주의
- **멀티스레딩** 고려

### 3. 자세 분석 알고리즘
- **각도 계산** 정확도 검증
- **임계값 설정** 실험적 검증
- **노이즈 필터링** 구현
- **실시간 피드백** 최적화

## 보안 규칙

### 1. 인증/인가
- **JWT 토큰** 사용
- **토큰 만료** 관리
- **비밀번호 해싱** (bcrypt)
- **CORS** 설정

### 2. 데이터 보호
- **개인정보 암호화** 저장
- **이미지 데이터** 보안 처리
- **API 요청 제한** 구현
- **HTTPS** 필수

## 성능 규칙

### 1. 백엔드 최적화
- **비동기 처리** 활용
- **캐싱** 전략 수립
- **데이터베이스 쿼리** 최적화
- **메모리 사용량** 모니터링

### 2. 프론트엔드 최적화
- **컴포넌트 최적화** (React.memo, useMemo)
- **이미지 압축** 및 최적화
- **번들 크기** 최적화
- **로딩 상태** 관리

## 테스트 규칙

### 1. 백엔드 테스트
- **Unit 테스트** 작성 (pytest)
- **Integration 테스트** 구현
- **API 테스트** 자동화
- **코드 커버리지** 80% 이상

### 2. 프론트엔드 테스트
- **Component 테스트** (Jest + React Testing Library)
- **E2E 테스트** (Cypress)
- **접근성 테스트** 구현

## 문서화 규칙

### 1. 코드 문서화
- **함수/클래스 docstring** 작성
- **API 문서** 자동 생성
- **README** 파일 유지보수
- **주석** 적절히 작성

### 2. 프로젝트 문서화
- **PRD** 업데이트
- **API 스펙** 문서화
- **배포 가이드** 작성
- **트러블슈팅** 가이드

## Git 규칙

### 1. 브랜치 전략
- **main**: 프로덕션 브랜치
- **develop**: 개발 브랜치
- **feature/**: 기능 개발 브랜치
- **hotfix/**: 긴급 수정 브랜치

### 2. 커밋 메시지
- **Conventional Commits** 형식 사용
- **한국어**로 명확하게 작성
- **작은 단위**로 커밋

## 배포 규칙

### 1. 환경 설정
- **환경변수** 관리
- **Docker** 컨테이너화
- **CI/CD** 파이프라인 구축
- **모니터링** 시스템 구축

### 2. 데이터베이스
- **마이그레이션** 자동화
- **백업** 전략 수립
- **성능 모니터링** 구현

## 특별 고려사항

### 1. AI 모델 성능
- **정확도 모니터링** 시스템 구축
- **모델 업데이트** 전략 수립
- **A/B 테스트** 구현

### 2. 사용자 경험
- **로딩 시간** 최소화
- **에러 메시지** 친화적 작성
- **접근성** 고려
- **반응형 디자인** 구현

### 3. 확장성
- **마이크로서비스** 아키텍처 고려
- **로드 밸런싱** 전략
- **데이터베이스 샤딩** 고려

## 코드 리뷰 체크리스트

### 1. 기능적 검증
- [ ] 요구사항 충족
- [ ] 에러 처리 구현
- [ ] 경계값 테스트
- [ ] 성능 최적화

### 2. 코드 품질
- [ ] 코딩 스타일 준수
- [ ] 중복 코드 제거
- [ ] 함수/클래스 분리
- [ ] 네이밍 컨벤션

### 3. 보안 검증
- [ ] 인증/인가 구현
- [ ] 데이터 검증
- [ ] SQL 인젝션 방지
- [ ] XSS 방지

### 4. 테스트 검증
- [ ] 단위 테스트 작성
- [ ] 통합 테스트 구현
- [ ] 테스트 커버리지 확인
- [ ] 성능 테스트 수행 